import cv2
import os
import numpy as np
from sklearn.model_selection import train_test_split


def load_images_from_folder(folder):
    images = []
    labels = []
    for label in ['fire', 'no fire']:
        label_folder = os.path.join(folder, label)
        for filename in os.listdir(label_folder):
            img = cv2.imread(os.path.join(label_folder, filename))
            if img is not None:
                img = cv2.resize(img, (64, 64))  # Resize to uniform size
                images.append(img.flatten())  # Flatten the image to 1D
                labels.append(1 if label == 'fire' else 0)
    return images, labels


# Load datasets
train_images, train_labels = load_images_from_folder('datawildfire/training')
test_images, test_labels = load_images_from_folder('datawildfire/testing')
val_images, val_labels = load_images_from_folder('datawildfire/validation')

# Convert to numpy arrays
X_train = np.array(train_images)
y_train = np.array(train_labels)
X_test = np.array(test_images)
y_test = np.array(test_labels)
X_val = np.array(val_images)
y_val = np.array(val_labels)
from sklearn import svm

# Create and train the SVM
clf = svm.SVC(kernel='linear')  # You can experiment with 'rbf', 'poly', etc.
clf.fit(X_train, y_train)
print("Validation Accuracy:", clf.score(X_val, y_val))
print("Test Accuracy:", clf.score(X_test, y_test))
from sklearn.metrics import confusion_matrix, classification_report

# Predict on the validation set
y_val_pred = clf.predict(X_val)
def prepare_image_for_prediction(img_path):
    # Load image
    img = cv2.imread(img_path)
    # Resize and flatten image as during training
    img = cv2.resize(img, (64, 64)).flatten()
    # Reshape to match the model's input expectations
    img = img.reshape(1, -1)
    # If scaling was applied during training, scale pixel values to [0, 1]
    img = img / 255.0
    return img

# Example usage
img_path = 'datawildfire/training/fire/fire.78.png'
prepared_img = prepare_image_for_prediction(img_path)
prediction = clf.predict(prepared_img)
print('fire' if prediction[0] == 1 else 'no fire')

# Generate and print the confusion matrix
conf_matrix_val = confusion_matrix(y_val, y_val_pred)
print("Confusion Matrix (Validation):")
print(conf_matrix_val)

# Generate and print the classification report
class_report_val = classification_report(y_val, y_val_pred, target_names=['no fire', 'fire'])
print("Classification Report (Validation):")
print(class_report_val)

# Predict on the test set
y_test_pred = clf.predict(X_test)

# Generate and print the confusion matrix
conf_matrix_test = confusion_matrix(y_test, y_test_pred)
print("Confusion Matrix (Test):")
print(conf_matrix_test)

# Import itertools for iteration operations


# Generate and print the classification report
class_report_test = classification_report(y_test, y_test_pred, target_names=['no fire', 'fire'])
print("Classification Report (Test):")
print(class_report_test)

import joblib

joblib.dump(clf, 'svm_fire.pkl')
